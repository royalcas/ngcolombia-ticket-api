// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NGColombia.Api.Persistence;
using System;

namespace NGColombia.Api.Migrations
{
    [DbContext(typeof(NGColombiaDbContext))]
    [Migration("20171022020936_SignatureInTransaction")]
    partial class SignatureInTransaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NGColombia.Api.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IdentificationNumber");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NGColombia.Api.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ConfirmationDateLimit");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("NGColombia.Api.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PaymentInformationId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentInformationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("NGColombia.Api.Models.PaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationCode");

                    b.Property<string>("Bank");

                    b.Property<string>("BuyerEmail");

                    b.Property<string>("Currency");

                    b.Property<string>("Cus");

                    b.Property<int>("InstallmentsNumber");

                    b.Property<string>("LapPaymentMethod");

                    b.Property<string>("LapPaymentMethodType");

                    b.Property<string>("LapResponseCode");

                    b.Property<string>("PaymentProviderReference");

                    b.Property<string>("PaymentProviderTransactionId");

                    b.Property<string>("PolPaymentMethod");

                    b.Property<int>("PolPaymentMethodType");

                    b.Property<string>("PolResponseCode");

                    b.Property<DateTime>("ProcessingDate");

                    b.Property<string>("ProviderMessage");

                    b.Property<double>("Taxes");

                    b.Property<string>("TransactionState");

                    b.Property<string>("TrazabilityCode");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("PaymentInformation");
                });

            modelBuilder.Entity("NGColombia.Api.Models.TicketType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<double>("Value");

                    b.Property<Guid?>("eventId");

                    b.HasKey("Code");

                    b.HasIndex("eventId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("NGColombia.Api.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ConfirmationDate");

                    b.Property<Guid?>("CustomerId");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<string>("Ip");

                    b.Property<string>("Signature");

                    b.Property<DateTime>("StartDate");

                    b.Property<double>("TotalValue");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NGColombia.Api.Models.TransactionTicketDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Quantity");

                    b.Property<string>("TicketTypeCode");

                    b.Property<Guid?>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeCode");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionTicketDetails");
                });

            modelBuilder.Entity("NGColombia.Api.Models.Invoice", b =>
                {
                    b.HasOne("NGColombia.Api.Models.PaymentInformation", "PaymentInformation")
                        .WithMany()
                        .HasForeignKey("PaymentInformationId");
                });

            modelBuilder.Entity("NGColombia.Api.Models.TicketType", b =>
                {
                    b.HasOne("NGColombia.Api.Models.Event", "event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("eventId");
                });

            modelBuilder.Entity("NGColombia.Api.Models.Transaction", b =>
                {
                    b.HasOne("NGColombia.Api.Models.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId");

                    b.HasOne("NGColombia.Api.Models.Invoice", "Invoice")
                        .WithOne("Transaction")
                        .HasForeignKey("NGColombia.Api.Models.Transaction", "InvoiceId");
                });

            modelBuilder.Entity("NGColombia.Api.Models.TransactionTicketDetail", b =>
                {
                    b.HasOne("NGColombia.Api.Models.TicketType", "TicketType")
                        .WithMany("Details")
                        .HasForeignKey("TicketTypeCode");

                    b.HasOne("NGColombia.Api.Models.Transaction", "Transaction")
                        .WithMany("Details")
                        .HasForeignKey("TransactionId");
                });
#pragma warning restore 612, 618
        }
    }
}
